{"version":3,"sources":["components/CustomAppBar.js","components/CustomSideDrawer.js","components/CustomBottomAppBar.js","components/Camera.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","grow","flexGrow","menuButton","marginLeft","marginRight","list","width","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","IconButton_default","Icon_default","CustomSideDrawer","open","toggleDrawer","SwipeableDrawer_default","onClose","onOpen","tabIndex","role","onClick","onKeyDown","theme","appBar","top","bottom","toolbar","alignItems","justifyContent","fabButton","zIndex","left","right","margin","_React$useState","React","useState","openSideDrawer","_React$useState2","Object","slicedToArray","state","setState","components_CustomSideDrawer","aria-label","Fab_default","Camera","inputRef","createRef","_useState","file","imagePreviewUrl","_useState2","type","accept","capture","onChange","e","event","URL","createObjectURL","target","files","ref","height","src","alt","createMuiTheme","palette","primary","main","light","dark","secondary","typography","useNextVariants","App","styles","components_CustomAppBar","components_Camera","CustomBottomAppBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cba211b2.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport Icon from \"@material-ui/core/Icon\"\r\n\r\nfunction CustomAppBar(props) {\r\n  const { classes } = props\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Pai\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Icon>account_circle</Icon>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  root: {},\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20\r\n  },\r\n  list: {\r\n    width: 250\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(CustomAppBar)\r\n","import React from \"react\"\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\"\r\n\r\nconst CustomSideDrawer = props => {\r\n  const { open, toggleDrawer } = props\r\n  return (\r\n    <SwipeableDrawer\r\n      open={open}\r\n      onClose={toggleDrawer(false)}\r\n      onOpen={toggleDrawer(true)}\r\n    >\r\n      <div\r\n        tabIndex={0}\r\n        role=\"button\"\r\n        onClick={toggleDrawer(false)}\r\n        onKeyDown={toggleDrawer(false)}\r\n      >\r\n        <div className=\"drawerList\">SideDrawer</div>\r\n      </div>\r\n    </SwipeableDrawer>\r\n  )\r\n}\r\n\r\nexport default CustomSideDrawer\r\n","import React from \"react\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport Fab from \"@material-ui/core/Fab\"\r\nimport CustomSideDrawer from \"./CustomSideDrawer\"\r\nimport Icon from \"@material-ui/core/Icon\"\r\n\r\nconst styles = theme => ({\r\n  appBar: {\r\n    top: \"auto\",\r\n    bottom: 0\r\n  },\r\n  toolbar: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\"\r\n  },\r\n  fabButton: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    top: -30,\r\n    left: 0,\r\n    right: 0,\r\n    margin: \"0 auto\"\r\n  }\r\n})\r\n\r\nfunction BottomAppBar(props) {\r\n  const { classes } = props\r\n\r\n  const [state, setState] = React.useState({\r\n    openSideDrawer: false\r\n  })\r\n\r\n  const toggleDrawer = openSideDrawer => () => {\r\n    setState({ openSideDrawer: openSideDrawer })\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <CustomSideDrawer\r\n        open={state.openSideDrawer}\r\n        toggleDrawer={toggleDrawer}\r\n      />\r\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Open drawer\"\r\n            onClick={toggleDrawer(true)}\r\n          >\r\n            <Icon>menu</Icon>\r\n          </IconButton>\r\n          <Fab color=\"secondary\" aria-label=\"Add\" className={classes.fabButton}>\r\n            <Icon>photo_camera</Icon>\r\n          </Fab>\r\n          <div>\r\n            <IconButton color=\"inherit\">\r\n              <Icon>more_vert</Icon>\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles)(BottomAppBar)\r\n","import React, { createRef, useState } from \"react\"\r\n\r\nconst Camera = props => {\r\n  const inputRef = createRef()\r\n  const [state, setState] = useState({ file: {}, imagePreviewUrl: \"\" })\r\n\r\n  const handleFile = event => {\r\n    // let reader = new FileReader()\r\n    // let file = event.target.files[0]\r\n\r\n    // reader.onloadend = () => {\r\n    //   setState({\r\n    //     file: file,\r\n    //     imagePreviewUrl: reader.result\r\n    //   })\r\n    // }\r\n\r\n    // reader.readAsDataURL(file)\r\n    setState({ imagePreviewUrl: URL.createObjectURL(event.target.files[0]) })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        capture\r\n        onChange={e => handleFile(e)}\r\n        ref={inputRef}\r\n      />\r\n      <img\r\n        width=\"250px\"\r\n        height=\"250px\"\r\n        src={state.imagePreviewUrl}\r\n        alt=\"preview\"\r\n      />\r\n      <p>new</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Camera\r\n","import React from \"react\"\nimport \"./App.css\"\nimport CustomAppBar from \"./components/CustomAppBar\"\nimport CustomBottomAppBar from \"./components/CustomBottomAppBar\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport Camera from \"./components/Camera\"\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#ec407a\", light: \"#ff77a9\", dark: \"#b4004e\" },\n    secondary: { main: \"#42a5f5\", light: \"#80d6ff\", dark: \"#0077c2\" }\n  },\n  typography: { useNextVariants: true }\n})\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <CustomAppBar />\n        <Camera />\n        <CustomBottomAppBar />\n      </MuiThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}