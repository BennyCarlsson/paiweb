{"version":3,"sources":["components/CustomAppBar.js","components/CustomBottomNavigation.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","list","width","props","classes","_React$useState","React","useState","left","_React$useState2","Object","slicedToArray","state","setState","toggleDrawer","side","open","objectSpread","defineProperty","react_default","a","createElement","className","AppBar_default","position","SwipeableDrawer_default","onClose","onOpen","tabIndex","role","onClick","onKeyDown","Toolbar_default","IconButton_default","color","aria-label","Icon_default","Typography_default","variant","CustomBottomNavigation","value","handleChange","event","_this","this","BottomNavigation_default","onChange","BottomNavigationAction_default","label","icon","Component","theme","createMuiTheme","palette","primary","main","light","dark","secondary","typography","useNextVariants","App","styles","components_CustomAppBar","components_CustomBottomNavigation","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e5faf49.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport Icon from \"@material-ui/core/Icon\"\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20\r\n  },\r\n  list: {\r\n    width: 250\r\n  }\r\n}\r\n\r\nfunction CustomAppBar(props) {\r\n  const { classes } = props\r\n  const [state, setState] = React.useState({\r\n    left: false\r\n  })\r\n  const toggleDrawer = (side, open) => () => {\r\n    setState({ ...state, [side]: open })\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <SwipeableDrawer\r\n          open={state.left}\r\n          onClose={toggleDrawer(\"left\", false)}\r\n          onOpen={toggleDrawer(\"left\", true)}\r\n        >\r\n          <div\r\n            tabIndex={0}\r\n            role=\"button\"\r\n            onClick={toggleDrawer(\"left\", false)}\r\n            onKeyDown={toggleDrawer(\"left\", false)}\r\n          >\r\n            <div className={classes.list}>SideDrawer</div>\r\n          </div>\r\n        </SwipeableDrawer>\r\n        <Toolbar>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"Menu\"\r\n            onClick={toggleDrawer(\"left\", true)}\r\n          >\r\n            <Icon>menu</Icon>\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Pai\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Icon>account_circle</Icon>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(CustomAppBar)\r\n","import React from \"react\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\"\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\"\r\nimport Icon from \"@material-ui/core/Icon\"\r\n\r\nconst styles = {\r\n  root: {\r\n    width: 500\r\n  }\r\n}\r\n\r\nclass CustomBottomNavigation extends React.Component {\r\n  state = {\r\n    value: \"recents\"\r\n  }\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ value })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props\r\n    const { value } = this.state\r\n\r\n    return (\r\n      <div className=\"bottomNavigationWrapper\">\r\n        <BottomNavigation\r\n          value={value}\r\n          onChange={this.handleChange}\r\n          className={classes.root}\r\n        >\r\n          <BottomNavigationAction\r\n            label=\"Home\"\r\n            value=\"Home\"\r\n            icon={<Icon>home</Icon>}\r\n          />\r\n          <BottomNavigationAction\r\n            label=\"Camera\"\r\n            value=\"Camera\"\r\n            icon={<Icon>photo_camera</Icon>}\r\n          />\r\n          <BottomNavigationAction\r\n            label=\"Nearby\"\r\n            value=\"Nearby\"\r\n            icon={<Icon>location_on</Icon>}\r\n          />\r\n        </BottomNavigation>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(CustomBottomNavigation)\r\n","import React from \"react\"\nimport \"./App.css\"\nimport CustomAppBar from \"./components/CustomAppBar\"\nimport CustomBottomNavigation from \"./components/CustomBottomNavigation\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#ec407a\", light: \"#ff77a9\", dark: \"#b4004e\" },\n    secondary: { main: \"#42a5f5\", light: \"#80d6ff\", dark: \"#0077c2\" }\n  },\n  typography: { useNextVariants: true }\n})\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <CustomAppBar />\n        <CustomBottomNavigation />\n      </MuiThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}